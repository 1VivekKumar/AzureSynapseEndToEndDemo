{
	"name": "Create Containers",
	"properties": {
		"description": "Creates processed and curated containers in our data lake.",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsee2espark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b9f69f43-db0a-4c1c-aa92-d7fa08f73b7c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/18a0af9c-7920-43e8-bc78-810906ced8f3/resourceGroups/SynapseE2E/providers/Microsoft.Synapse/workspaces/synapsee2e/bigDataPools/synapsee2espark",
				"name": "synapsee2espark",
				"type": "Spark",
				"endpoint": "https://synapsee2e.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsee2espark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 5,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"StorageAccountName = ''\r\n",
					"StorageAccountKey = ''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"pip install azure-storage-file-datalake\r\n",
					"import os, uuid, sys\r\n",
					"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
					"from azure.core._match_conditions import MatchConditions\r\n",
					"from azure.storage.filedatalake._models import ContentSettings\r\n",
					"\r\n",
					"def initialize_storage_account(StorageAccountName, StorageAccountKey):\r\n",
					"    \r\n",
					"    try:  \r\n",
					"        global service_client\r\n",
					"\r\n",
					"        service_client = DataLakeServiceClient(account_url=\"{}://{}.dfs.core.windows.net\".format(\r\n",
					"            \"https\", storage_account_name), credential=StorageAccountKey)\r\n",
					"    \r\n",
					"    except Exception as e:\r\n",
					"        print(e)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def create_file_system():\r\n",
					"    try:\r\n",
					"        global file_system_client\r\n",
					"\r\n",
					"        file_system_client = service_client.create_file_system(file_system=\"TestFS\")\r\n",
					"    \r\n",
					"    except Exception as e:\r\n",
					"        print(e)"
				],
				"execution_count": null
			}
		]
	}
}